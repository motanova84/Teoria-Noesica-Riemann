name: 🌊 Resonancia Viva CI - f₀ = 141.7001 Hz

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Verificar resonancia diariamente a las 14:17 UTC (1417 - primo sagrado)
    - cron: '17 14 * * *'

jobs:
  test-resonance:
    name: 🎵 Test Frecuencia de Resonancia
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
        
    steps:
    - name: 📥 Checkout Teoría Noésica
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov coverage
        
    - name: 🧪 Test Generación de Primos
      run: |
        python -c "
        from sympy import isprime
        assert isprime(1417), '❌ 1417 no es primo!'
        assert abs(1417/10 - 141.7001) < 1e-15, '❌ Frecuencia incorrecta!'
        print('✅ Primo 1417 y frecuencia f₀ = 141.7001 Hz verificados')
        "
        
    - name: 🎯 Test Frecuencia de Resonancia
      run: |
        python -c "
        from noesic_theory import NoesicRiemannTheory
        theory = NoesicRiemannTheory()
        primes = theory.generate_primes(1000)
        theory.compute_delta_log_primes()
        theory.compute_variance()
        freq = theory.compute_resonance_frequency()
        print(f'🎵 Frecuencia computada: {freq:.3f} Hz')
        print(f'🎯 Objetivo: {theory.target_frequency} Hz')
        assert freq > 0, '❌ Frecuencia debe ser positiva!'
        print('✅ Resonancia viva confirmada!')
        "
        
    - name: 🧠 Test Ecuación de Consciencia
      run: |
        python -c "
        from noesic_theory import NoesicRiemannTheory
        import numpy as np
        theory = NoesicRiemannTheory()
        result = theory.consciousness_equation(2.5, 0.618, np.pi/np.e)
        assert result['psi'] > 0, '❌ Consciencia debe ser positiva!'
        print(f'🧠 Ψ = {result[\"psi\"]:.6f}')
        print('✅ Ecuación de consciencia funcional!')
        "
        
    - name: 🎼 Test Relaciones Armónicas
      run: |
        python -c "
        from noesic_theory import NoesicRiemannTheory
        import numpy as np
        theory = NoesicRiemannTheory()
        theory.generate_primes(1000)
        theory.compute_delta_log_primes()
        theory.compute_variance()
        theory.compute_resonance_frequency()
        harmonics = theory.verify_harmonic_relations()
        f1_error = harmonics['f1_error']
        phi_error = harmonics['phi_error']
        sqrt2_error = harmonics['sqrt2_error']
        print(f'🎼 Error f₁ vs 888 Hz: {f1_error:.1f} Hz')
        print(f'🌟 Error φ: {phi_error:.6f}')
        print(f'🔢 Error √2: {sqrt2_error:.6f}')
        assert f1_error < 50, f'❌ f₁ muy alejado de 888 Hz: {f1_error:.1f}'
        print('✅ Relaciones armónicas verificadas!')
        "
        
    - name: 🧪 Run Full Test Suite
      run: |
        pytest tests/ -v --cov=noesic_theory --cov-report=xml --cov-report=html
        
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        
    - name: 🌊 Generate Resonance Report
      run: |
        python -c "
        from noesic_theory import NoesicRiemannTheory
        import json
        from datetime import datetime
        
        theory = NoesicRiemannTheory()
        results = theory.full_noesic_analysis(N=1000)
        
        report = {
          'timestamp': datetime.now().isoformat(),
          'frequency_computed': results['computed_frequency'],
          'frequency_target': results['target_frequency'],
          'resonance_ratio': results['resonance_ratio'],
          'prime_1417_verified': results['prime_1417_verification'],
          'python_version': '${{ matrix.python-version }}',
          'status': '🌊 Resonancia Viva Activa ∞³'
        }
        
        with open('resonance_report.json', 'w') as f:
            json.dump(report, f, indent=2)
            
        print('📄 Reporte de resonancia generado')
        print(f'🎵 f₀ = {results[\"computed_frequency\"]:.3f} Hz')
        print('∴ Teoría Noésica validada ∞³ ∴')
        "
        
    - name: 📄 Upload Resonance Report
      uses: actions/upload-artifact@v3
      with:
        name: resonance-report-py${{ matrix.python-version }}
        path: resonance_report.json
        
  deploy-docs:
    name: 📚 Deploy Documentation
    runs-on: ubuntu-latest
    needs: test-resonance
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 📦 Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install mkdocs mkdocs-material
        
    - name: 🏗️ Build Documentation
      run: |
        mkdocs build --clean
        
    - name: 🚀 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        
  resonance-analysis:
    name: 🔬 Análisis Profundo de Resonancia
    runs-on: ubuntu-latest
    needs: test-resonance
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 📦 Install Dependencies
      run: |
        pip install -r requirements.txt
        
    - name: 🔬 Deep Resonance Analysis
      run: |
        python -c "
        from noesic_theory import NoesicRiemannTheory
        import numpy as np
        import matplotlib
        matplotlib.use('Agg')  # Backend no interactivo
        import matplotlib.pyplot as plt
        
        theory = NoesicRiemannTheory()
        
        # Análisis con diferentes valores de N
        N_values = [100, 500, 1000, 2000, 5000]
        frequencies = []
        variances = []
        
        for N in N_values:
            primes = theory.generate_primes(N*10)[:N]
            if len(primes) >= 10:
                delta_log = theory.compute_delta_log_primes(primes)
                variance = theory.compute_variance(delta_log)
                freq = theory.compute_resonance_frequency(variance)
                frequencies.append(freq)
                variances.append(variance)
                print(f'N={N}: Var={variance:.7f}, f₀={freq:.3f} Hz')
        
        # Crear gráfica de convergencia
        plt.figure(figsize=(12, 8))
        
        plt.subplot(2, 1, 1)
        plt.semilogx(N_values[:len(variances)], variances, 'bo-', linewidth=2, markersize=8)
        plt.axhline(0.0001133, color='red', linestyle='--', label='Valor límite (paper)')
        plt.xlabel('N (número de primos)')
        plt.ylabel('Var(Δlog pₖ)')
        plt.title('🔬 Convergencia de Varianza - Análisis CI/CD')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        plt.subplot(2, 1, 2)
        plt.semilogx(N_values[:len(frequencies)], frequencies, 'go-', linewidth=2, markersize=8)
        plt.axhline(141.7001, color='red', linestyle='--', linewidth=2, label='f₀ = 141.7001 Hz')
        plt.xlabel('N (número de primos)')
        plt.ylabel('Frecuencia de Resonancia (Hz)')
        plt.title('🎵 Convergencia a f₀ = 141.7001 Hz')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig('resonance_convergence.png', dpi=300, bbox_inches='tight')
        print('📊 Gráfica de convergencia guardada')
        
        # Resumen final
        if frequencies:
            final_freq = frequencies[-1]
            error = abs(final_freq - 141.7001)
            print(f'')
            print(f'🎯 ANÁLISIS FINAL DE RESONANCIA:')
            print(f'   Frecuencia final: {final_freq:.3f} Hz')
            print(f'   Objetivo: 141.7001 Hz')
            print(f'   Error: {error:.3f} Hz ({error/141.7001*100:.2f}%)')
            print(f'   Estado: {'✅ RESONANCIA ACTIVA' if error < 10 else '⚠️ RESONANCIA DÉBIL'}')
            print(f'   ∴ Análisis CI/CD completado ∞³ ∴')
        "
        
    - name: 📊 Upload Convergence Plot
      uses: actions/upload-artifact@v3
      with:
        name: resonance-convergence-analysis
        path: resonance_convergence.png

  notification:
    name: 🌊 Notificación de Resonancia
    runs-on: ubuntu-latest
    needs: [test-resonance, deploy-docs, resonance-analysis]
    if: always()
    
    steps:
    - name: 🎵 Resonance Status
      run: |
        echo "🌊 ESTADO DE LA RESONANCIA VIVA:"
        echo "   Tests: ${{ needs.test-resonance.result }}"
        echo "   Docs: ${{ needs.deploy-docs.result }}"
        echo "   Análisis: ${{ needs.resonance-analysis.result }}"
        echo ""
        echo "🎵 f₀ = 141.7001 Hz = 1417/10"
        echo "🔢 Primo 1417 verificado"
        echo "🧠 Ecuación de consciencia: Ψ = I × A²eff × K"
        echo ""
        echo "∴ RESONANCIA VIVA EN GITHUB ACTIONS ∞³ ∴"
